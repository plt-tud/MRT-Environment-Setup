#!/bin/bash

# Version     : 0.4
# Author      : Chris Iatrou, Martin Heinl, Johannes Pfeffer,
# License     : GPL

## Planned Features
# Allow 32-bit architecture (branches for Eclipse and PATH in run-eclipse, etc...)
# Eclipse headless import-all instead of import


function usage() {
  echo "This is the setup script for the PLT Microcomputingtechnologies 1/2 toolchain and IDE."
  
  echo "Usage"
  echo "  ./setup [--batch] [--clean] [--skipruncheck]"
  echo ""
  echo "Options:"
  echo "--batch         Assume we are running on a debian based distro and pick appropriate options (for Cont. Integration)"
  echo "--clean         Remove existing eclipse/toolchain/workspace components"
  echo "--skipruncheck  Proceed with installation, even if eclipse is currently running"
  echo ""
}

## Globals

WORKSPACE_DIR="workspace"
ARCHITECTURE=`uname -m`

# Required packages ##
# Essential packages for builiding, java (for Eclipse) and wget to download resources
REQUIREMENTS="build-essential git openjdk-11-jre wget curl gdb libsdl1.2-dev libsdl2-dev libncurses-dev libncurses5"
REQUIREMENTS_DEBIAN=$REQUIREMENTS
REQUIREMENTS_SUSE="gcc gcc-c++ make git wget java-1_7_0-openjdk curl"

# Eclipse version to install
ECLIPSE_PACKAGE="https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2018-09/R/eclipse-cpp-2018-09-linux-gtk.tar.gz&r=1"

# GitHub repos to clone and import into the workspace
GITHUB_REPOS=( "${GITHUB_REPOS[@]}" "PLT_MRT_ARM-RPi2" )

## Config values/defaults for arguments
CFG_BATCH_MODE='false'        # Don't ask questions... assume defaults
CFG_CLEANUP='false'           # Remove any downloaded data, such as eclipse, workspaces, repos, etc (reinstall)
CFG_CHECK_RUNNING='true'     # Don't check if eclipse is running. Just update.

function log_error () { 
 echo " Error: $@" ; 
}

function log_info () { 
 echo " Info: $@" ; 
}


function process_arguments() {  
  while [ $# -gt 0 ]; do
    ARG="$1"
    log_info "processing argument $ARG"
    if [ ${ARG} = "-batch" -o  ${ARG} = "--batch" ]; then
      CFG_BATCH_MODE='true'
    elif [ ${ARG} = "-clean" -o  ${ARG} = "--clean" ]; then
      CFG_CLEANUP='true'
    elif [ ${ARG} = "--skipruncheck" ]; then
      CFG_CHECK_RUNNING='false'
    else
      log_error "Uknown argument: ${ARG}"
      usage
      exit 1
    fi
    
    shift 1
  done
}

function download()
{
    local url=$1
    local target=$2
    echo -n "    "    
    curl -L "$url" -o $target
    echo " DONE"
}

function do_as_root() {
  if [ `whoami`='root' ]; then
    $@
  else 
    sudo $@
  fi
  return
}

function install_dependencies() {
    echo "Installing requirements (calling sudo) ..."
    INSTALLOK='false'
    DEB_CHOOSEINSTALLER='99'
    
    if [ -n "$(echo $DISTRIBUTION | grep debian)" -o -n "$(echo $DISTRIBUTION | grep ubuntu)" -o -n "$(echo $DISTRIBUTION | grep mint )"  ]; then
      
      while [ $INSTALLOK = 'false' ]; do
        echo -e "You are using a debian based distribution.\nDo you want to use 'apt-get' or 'aptitude' to install dependencies?\n'1' for 'apt'\n'2' for 'apt-get'\n'3' for 'aptitude'\n'0' to abort"
        
        if [  $CFG_BATCH_MODE = 'true' ]; then
          # Apt-get appears to be a common basis for debian (newer ones use apt, but still provide apt-get)
          do_as_root apt-get -y --allow-unauthenticated --show-progress install $REQUIREMENTS_DEBIAN && INSTALLOK='true'
          INSTALLOK='true'
          DEB_CHOOSEINSTALLER='2'
        else
          read -p "> " -n 1 -r DEB_CHOOSEINSTALLER
          echo -e "\n"
        fi 
        
        case "$DEB_CHOOSEINSTALLER" in
          "0")  echo "User aborted installation"
                exit 0
                ;;
          "1")  do_as_root apt -q --show-progress install $REQUIREMENTS_DEBIAN && INSTALLOK='true'
                INSTALLOK='true'
                ;;
          "2")  do_as_root apt-get -q --show-progress install $REQUIREMENTS_DEBIAN && INSTALLOK='true'
                INSTALLOK='true'
                ;;
          "3")  do_as_root aptitude -q install $REQUIREMENTS_DEBIAN -y		#aptitude behaves different then apt-get and if done the same way, $INSTALLOK would always be TRUE
                if [ $? -eq 0 ]; then
                  INSTALLOK='true'
                fi
                ;;
          *)    echo -e "\nChoice was not recognized. Please select 0..2."
                INSTALLOK='false'
                ;;
        esac
      done
    elif [ -n "$(echo $DISTRIBUTION | grep suse)" ]; then
        do_as_root zypper install -l --no-recommends $REQUIREMENTS_SUSE && INSTALLOK='true'
    else
        echo "Unable to determine the package manager for your distribution ($DISTRIBUTION/$DISTVERION)."
        exit 1
    fi
    
    if  [ $INSTALLOK != 'true' ]; then 
        echo " Failed."
        exit 1
    else
        echo " DONE"
    fi
    echo ""
}

################################################################v
## Script/Main/Start
################################################################v

if [ -x /usr/bin/lsb_release ]; then
  DISTRIBUTION=`/usr/bin/lsb_release -si | awk '{print tolower($0); exit 0}'`
  DISTVERSION=`/usr/bin/lsb_release -sr | awk '{print tolower($0); exit 0}'`
elif [ -x /usr/bin/lsb-release ]; then
  DISTRIBUTION=`/usr/bin/lsb-release -si | awk '{print tolower($0); exit 0}'`
  DISTVERSION=`/usr/bin/lsb-release -sr | awk '{print tolower($0); exit 0}'`
else
  DISTRIBUTION="unknown"
  DISTVERSION="unknown"
fi

process_arguments $@

##### Welcome #####
echo "This script will install the MRT lecture programming environment for Raspberry Pi cross-compilation."
echo "It will download ~400 MB and use ~1.5GB disk space."
echo

if [ $CFG_BATCH_MODE = 'true' ]; then
  log_info "Batch-Mode: assuming 'yes'"
  REPLY=y
else
  read -p "Would you like to continue? (y/N) " -n 1 -r
  echo    
fi

if [ -z "$(echo $REPLY | grep -i y)" ]; then
    exit 0
fi

##### Some checks #####
# Check architecture
if [ $ARCHITECTURE != "i686" ]; then
    log_error "This script is only for the i686 architecture."
    exit 1
fi

# Check if Eclipse is running
if [ $CFG_CHECK_RUNNING = 'true' ]; then
  if ps ax | grep eclipse.equinox | grep -v grep | grep -v $0 > /dev/null; then
      log_error "Eclipse is running! Please exit Eclipse!"
      exit 1
  fi
fi

##### Setup environment #####
# Set PATH variable
export PATH=$PATH:"$PWD/raspberrypi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin"

# Install requirements
install_dependencies

# Download eclipse
if [ $CFG_CLEANUP = 'true' -a -d "eclipse" ]; then
  log_info "Cleanup: removing existing eclipse install"
  rm -rf "eclipse"
fi
    
if [ -f "eclipse/eclipse" ]; then
    log_info "The 'eclipse' folder already exists."
    echo ""
else
    echo "Downloading eclipse ..."
    download "$ECLIPSE_PACKAGE" eclipse.tar.gz
    echo "Extracting eclipse ..."
    
    # Extract tar but keep the configuration directory that has already been set up in the repository
    tar --skip-old-files -xzf eclipse.tar.gz
    rm -f eclipse.tar.gz
    
    echo " DONE"
    echo ""
fi

# Raspberry Pi cross-compilation tool chain
if [ $CFG_CLEANUP = 'true' -a -d "raspberrypi" ]; then
  log_info "Cleanup: removing existing raspberrypi install"
  rm -rf "raspberrypi"
fi

if [ -d "raspberrypi" ]; then
    log_info "The folder 'raspberrypi' already exists."
    echo ""
else
    echo "Cloning the Raspberry Pi tools repository. This may take a while, it is big (~200MB download, ~1GB afterwards) ..."
    mkdir raspberrypi
    git clone --depth=1 https://github.com/raspberrypi/tools.git raspberrypi/tools
    echo " DONE"
    echo ""
    
    
    # Remove unwanted tools
    cd raspberrypi/tools/arm-bcm2708/
    ls | grep -Fxv gcc-linaro-arm-linux-gnueabihf-raspbian | xargs sudo rm -r
    cd ../../..
fi

# Create workspace
if [ $CFG_CLEANUP = 'true' -a -d "${WORKSPACE_DIR}" ]; then
  log_info "Cleanup: removing existing raspberrypi install"
  rm -rf "${WORKSPACE_DIR}"
fi

echo "Creating/updating MRT workspace ..."
if [ ! -d "${WORKSPACE_DIR}" ]; then
    mkdir "${WORKSPACE_DIR}"
fi

# Clone and import repositories
for REPO in "${GITHUB_REPOS[@]}" 
do
    echo " $REPO"
    
    rm -r workspace/$REPO
    git clone https://github.com/plt-tud/$REPO.git workspace/$REPO
done

# Create ssh configuration files
if [ ! -f /home/mrt/.ssh/known_hosts ]; then
	echo "Creating ~/.ssh/known_hosts"
	mkdir -p /home/mrt/.ssh/
	touch /home/mrt/.ssh/known_hosts
fi

echo "Changing permissions to rwx for group and user..."

chmod -R 755 .
chown -R mrt .

echo " DONE"
echo ""

echo "+++++ INFO ++++"
echo "Start Eclipse with the command ./run-eclipse"
